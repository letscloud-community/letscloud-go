// Code generated by MockGen. DO NOT EDIT.
// Source: letscloud.go
//+build !test

// Package httpclient is a generated GoMock package.
package httpclient

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockRequester is a mock of Requester interface
type MockRequester struct {
	ctrl     *gomock.Controller
	recorder *MockRequesterMockRecorder
}

// MockRequesterMockRecorder is the mock recorder for MockRequester
type MockRequesterMockRecorder struct {
	mock *MockRequester
}

// NewMockRequester creates a new mock instance
func NewMockRequester(ctrl *gomock.Controller) *MockRequester {
	mock := &MockRequester{ctrl: ctrl}
	mock.recorder = &MockRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequester) EXPECT() *MockRequesterMockRecorder {
	return m.recorder
}

// NewRequest mocks base method
func (m *MockRequester) NewRequest(method, url string, data interface{}) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", method, url, data)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest
func (mr *MockRequesterMockRecorder) NewRequest(method, url, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockRequester)(nil).NewRequest), method, url, data)
}

// SendRequest mocks base method
func (m *MockRequester) SendRequest(req *http.Request) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", req)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequest indicates an expected call of SendRequest
func (mr *MockRequesterMockRecorder) SendRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockRequester)(nil).SendRequest), req)
}

// SetTimeout mocks base method
func (m *MockRequester) SetTimeout(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", d)
}

// SetTimeout indicates an expected call of SetTimeout
func (mr *MockRequesterMockRecorder) SetTimeout(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockRequester)(nil).SetTimeout), d)
}

// SetAPIKey mocks base method
func (m *MockRequester) SetAPIKey(t string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIKey", t)
}

// SetAPIKey indicates an expected call of SetAPIKey
func (mr *MockRequesterMockRecorder) SetAPIKey(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIKey", reflect.TypeOf((*MockRequester)(nil).SetAPIKey), t)
}

// APIKey mocks base method
func (m *MockRequester) APIKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// APIKey indicates an expected call of APIKey
func (mr *MockRequesterMockRecorder) APIKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIKey", reflect.TypeOf((*MockRequester)(nil).APIKey))
}
